<설정 및 환경 관련>
* SDK Manager - Android SDK
    SDK Platform 설치 필요, SDK Tools의 Android Emulator, SDK Platform-Tools, SDK-Tools 필요.
    (특히, waiting for target device to come online 이 길어지면 확인해 볼 것.)
    waiting for target device to come online
     1.SDK Manager에서 필요요소 설치
     2. File -> Invalidate Cashes / Restart
     3. AVD Manager로 가서 가상 머신 옵션의 Wipe Datas

* appCompatActivity(하위 버전을 지원하는 액티비티.)

* android name에 선언한 Global Application - 'Application 이름' (App 실행 시, App 구성 요소들 보다 인스턴스화 됨.)

java -> kotlin
 1. 새로운 객체 new 한 것을 선언 -> object : 객체 () {} 
 2. static으로 정의된 것 -> companion object{} 안에 포함 시킴.

* Tools - Kotlin - Configure Kotlin Plugin Updates를 실행한 뒤 최신버전 과 build.gradle(project) 안의 ext.kotlin_version을 맞춰줘야한다.

* local.properties의 sdk.dir 자동으로 맞춰줌.

*dependecies에서 jre로 되어있는 것을 jdk로 변경한다.
implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version => implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version
// 참고: https://tjandroid.blogspot.com/2018/11/api-implementation.html

* Gradle Dependency> compile -> implementation

* Package Name: Manifest 혹은 Gradle에서 설정가능 (Flavor로 b2b인지 b2c용인지 나눌 수 있다.)

<코딩 관련>

* Life Cycle은 어떤 동작이 필요한 시점에 특정 라이프 사이클 호출되어야 하는지가 중요하다.

* var 변수명:변수타입
* var(variable) VS val(valuable) 차이
 - var는 get/set가능한 일반 변수
 - val은 get만 가능한 상수

* ? - nullable 변수 선언시 사용한다. (예. container:ViewGroup?)
    - 코틀린엔 Non-null과 Nullable 타입이 존재함.

* C#은 하나의 코드에 designer가 포함되어 있어서 컴포넌트를 id로 바로 불러올 수 있지만
android는 화면xml을 import 해주어야 한다. ex) import kotlinx.android.synthetic.main.activity_login.*

* resource는 코드 내에선 R 객체로 접근한다. 화면에서는 @타입/name으로 찾는다.(@color/colorWhite)
    -> SetContentView가 선행으로 이루어야 FindViewById로 읽을 수 있음.    

* 디자인은 C#의 designer 처럼 xml text를 건드리지 않고 design의 attributes(C#에서는 properties)를 조절한다.

* Fragment는 Activity 안에 독립적으로 뜰 수 있는 화면

* Constraint Layout VS Relative Layout
 ConstraintLayout: 뷰의 수평적인 계층 구조, 성능도 빠름. => UI 배치의 편리함.
 RelativeLayout: 뷰들 간에 정렬을 위해 새로운 ViewGroup 생성 필요.

* Fragment -  하위 Activity로 봐도 무관함. 자체 생명주기를 가짐. 자체적으로 이벤트도 받음. 
              Fragment 클래스를 구현해야 사용가능 함. Fragment 자체 layout 또한 필요함.
              정적 추가: fragment, 동적 추가: FrameLayout

* Missing Constraints in ConstraintLayout Error - ConstraintLayout 안의 View들이 parent인 ConstraintLayout에 연결시켜야 한다.

* HTTP 통신 (POST 방식, 서울메트로에 요청)
 1. 라이브러리 khttp 사용하기 위해 app build에 'implementation group: 'khttp', name: 'khttp', version: '0.1.0'' 추가
 2. val policy = StrictMode.ThreadPolicy.Builder().permitAll().build() 선언 후 setThreadPolicy(policy) 선언 => android.os.strictmode$androidblockguardpolicy.onnetwork exception 발생
    - StrictMode는 메인 스레드에서 디스크/네트워크 접근 등의 비효율적인 작업을 하려는 것을 감지함. (속도가 느려질 수 있는 동작을 미리 감지 함.), 오래 걸릴 수 있는 작업을 Main Thread와 분리하여 Android Not Response 방지.
    - Callback, lifecycle 관련 등의 UI 이벤트 들은 모두 Main Thread에서 처리함.
    - 디스크 접근: 파편화된 블록 모으기 작업을 수행하는 동안 지연발생 가능성 + 다른 프로세스가 삭제 작업을 진행하면 다른 프로세스의 IO 작업이 지연 + 메모리 여유 공간이 적을 수록 IO 지연
    - 네트워크 접근: 예측 불가능 하므로 Main Thread에서 처리하면 안됨. (기본적으로 정책 적용됨)
    - Thread 정책을 모두 허용하는 정책(permitAll().build())으로 설정한다.(setThreadPolicy)
 3. AndroidManifest.xml 안에 <user-permission android:name="android.permission.INTERNET" /> 선언. =>  java.lang.SecurityException: Permission denied (missing INTERNET permission?) 발생
 4. POST 방식, Query String을 mapOf("Key1" to "Value2",...)로 선언하여 payload에 넣고, post(url = "", data = payload)을 실행하면 Response 객체로 온다.
 5. Reponse 객체의 text 값을 보면 결과 값이 xml 형태로 날라온 것을 알 수 있다.

  //참고: https://noota.tistory.com/entry/StrictMode-%EA%B0%84%EB%8B%A8-%EC%A0%95%EB%A6%AC, 
        https://khttp.readthedocs.io/en/latest/user/quickstart.html
 
* ListView : 모든 데이터에 대한 View를 만들고, View가 사라졌다가 나타날 때마다 리소스를 불러와야 함. (예. 화면을 아래로 스크롤 했다가 다시 위로 올릴 때 리소스 다시 불러옴.)
            -> 메모리와 저장 공간을 많이 사용하므로 비효율적            

* RecyclerView - ListView의 단점을 보완. (예. 300개의 dataSet이 있고 화면상에는 10개의 dataSet만 보여진다면 10개의 공간을 생성 후 그 공간을 재활용하여 300개를 보여준다.)
 1. 사용하기 위해 gradle에 추가한다.
 2. RecyclerView 를 layout에 선언한다. (id: mRecyclerView)
 3. RecyclerView에서 사용하는 항목 하나하나를 담당 할 item 뷰에 대한 xml도 추가한다.
 4. RecyclerView 를 위한 Activity를 생성한다.
 5. 어답터를 생성한다.
    Adapter : 데이터의 원본을 받아서 관리하고, View가 출력할 수 있는 형태로 데이터를 제공하는 중간 객체. 받은 데이터를 어떻게 보여줄지 정해주는 바인딩 역할의 객체라 보면 됨.
             어댑터와 연결된 원본 데이터가 변경되면, notifyDataSetChanged 메서드를 호출하여 화면에 다시 그려지도록 한다.
    ViewHolder : RecyclerView 내 위치하는 곳의 item view와 metadata 정보를 갖고있는 역할.
     => RecyclerView가 있고, 그 내부의 item view들에 data들을 binding 시켜주는 역할은 adapter가 전담한다.
        Adapter는 각 item view의 정보를 갖고 있는 ViewHolder를 이용해서 각각의 item view에 알맞은 data를 binding 시켜준다.
        그리고 LayoutManager가 각 item view들의 크기를 측정하고 위치를 지정하여 RecyclerView를 구성한다.

 6. mRecyclerView에 어답터를 붙인다.
 7. mRecyclerView에 해당하는 layoutManager를 붙인다. (mRecyclerView.layoutManager = LinearLayoutManager(applicationContext))
    LayoutManager : RecyclerView 내에 item View들의 크기를 측정하고 위치를 지정하고 언제 item View들을 재사용하는지에 대한 정책을 결정하는 역할.

 // 참고 : https://blog.naver.com/mail1001/220682221473

 * intent를 이용한 activity call
  1. intent를 선언한다. Intent (현재 액티비티, 전달할 액티비티) (예. Intent(this, RecyclerViewActivity::class.java))
  2. 전달할 데이터를 넣는다. intent.putExtra(key, value)
  3. startActivity(intent)를 작성한다.

 * 다이얼 혹은 바로 전화 걸기
  1. Manifest에 permission 추가.
    <uses-permission android:name="android.permission.CALL_PHONE" />
    <uses-permission android:name="android.permission.DIAL_PHONE" />
  2. "tel:" + 번호를 intent 정보로 넘긴다. 키 값은
    Intent("android.intent.action.DIAL", Uri.parse(uriString))
    Intent("android.intent.action.CALL", Uri.parse(uriString))
  3. startActivity(intent)를 작성한다.

 * startActivity 했을 때 하얀 화면만 나오는 경우
  1. preview에 보이는 화면의 height 값이 실제 앱이 올라가는 화면의 height 값하고 달라서 발생하는 현상. -> 절대값으로 잡지않고 상대값 혹은 wrap_content 등을 사용하여 해결
  2. 잘못된 onCreate를 사용했을 때, UI 초기화에 사용하는건 persistableState가 없는 것이므로, onCreate(savedInstanceState)인 onCreate를 사용해야 제대로 호출되고 view를 초기화 할 수 있다.

 * 코틀린에서의 물음표 
  코틀린은 안전한 null 사용 방법을 제공한다. ?를 사용하면 null 가능
  var A : string? = null
  A.length
  => Error 발생, A가 null이 될 수 있기 때문에 length 호출 불가. -> val length = if (A) != null) (A as String).length else -1 또는 A!!.length하면 강제로 호출 가능

 * warp_content(필요한 길이만 사용, 절대값 사용 가능) VS match_parent(해당 레이아웃을 가진 부모의 컨테이너 길이를 모두 사용)

 * lateinit
 // 참고 : https://kkangsnote.tistory.com/67

 * inflation (부풀리다.)
  - 레이아웃 xml에 명시한 것을 안드로이드 메모리에 생성하는 과정, xml에 씌여져 있는 view의 정의를 실제 view 객체로 만드는 역할.
  - xml 로 명시 안하고 java or kotlin으로 view를 만들 수 있다.
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        LinearLayout linear = new LinearLayout(this);
        linear.setOrientation(LinearLayout.VERTICAL);
        linear.setBackgroundColor(Color.WHITE);
         
        TextView text = new TextView(this);
        text.setText("코드로 생성");
        text.setGravity(Gravity.CENTER);
        text.setTextColor(Color.RED);
        text.setTextSize(20);
         
        linear.addView(text); //부모 자식관계 설정과정
        setContentView(linear);
    }

  - complie time 후의 xml만 가능(runtime은 불가)
 
  // 참고 : https://aroundck.tistory.com/39
  // https://bryant.tistory.com/80

  * 'com.android.support libraries must use the exact same version specification'
  일부 라이브러리들의 버전이 일치해야하는데 일치하지 않아서 발생하는 현상.
  내 경우는 cardView 및 customtabs가 버전이 낮아서 발생함.
  버전 맞지 않는 라이브러리 마다 gradle dependency에 추가함.

  * SNS API 콜을 위한 키 해시 등록 -
    - C:\Users\{rpDesk\.android> keytool -exportcert -alias androiddebugkey -keystore debug.keystore -storepass android -keypass android | openssl sha1 -binary | openssl base64
    - keytool : JAVA_HOME/bin 아래에 존재 (path 잡으면 아무곳에서 상관 X)
    - openssl : 별도 설치 필요

    + 코드로 키해시 구할 수 있음.

  * 로그인 이후에 '카카오 계정 로그인을 사용하기 위해서는 사용자 관리를 설정해야 합니다.' 라는 문구가 발생하면, 카카오 개발자 API에 들어가서 사용자 관리 설정을 추가적으로 해야 한다.

 * Retrofit + Okhttp
  - Retrofit : 통신 라이브러리를 맵핑하여 REST 방식의 호출을 사용할 수 있게 하는 라이브러리. 클라이언트를 통해 얻어온 정보를 Json, Gson, Rx 등 유연하게 맵핑하게 도와줌.
   - baseUrl(url : String) : http 통신 할 url
   - addConverterFactory(converter : Converter.Factory) : 컨버팅할 Factory 설정 (예. .addConverterFactory(GsonConverterFactory.create()))
  - intercept : OkHttp에서 사용. 네트워크 통신 도중 공통적으로 실어 보내거나 받아쓸 때 사용. (App단(App - OkHttp Core) , Network단(OkHttp Core - App))
  - NetworkInterceptor : interceptor 구현 후 addInterceptor로 추가
  - ApplicationInterceptor : interceptor 구현, intercept라는 오버라이딩 함수를 이용하여 구현.
  - OkHttp : HTTP 호출시에 각종 값들을 셋팅할 수 있게 도와주는 라이브러리, Retrofit과 같이 사용되는 이유는 OkHttp를 통해 쿠키, timeout, log 등 각종 HTTP와 관련된 통신을 돕는다.  

 // 참조: https://developer88.tistory.com/67 (Retrofit + okhttp + rx 모두 같이 사용)
 // 참조: https://gamjatwigim.tistory.com/53 (Retrofit + okhttp + rx 모두 같이 사용)
 
 * broadcast & service

  - 코드
    // 시스템이 broadcast 해주는 intent를 받아 냄.
    public class BootReceiver extends BroadcastReceiver{
        @Override
        public void onReceive(Context context, Intent intent) {
            // ACTION_BOOT_COMPLETED - intent enum type이 부팅 완료.
          if (intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED)) {
            Intent i = new Intent(context, test.class);
            context.startService(i);
          }
        }
    }

  - androidManifest.xml에 등록
    <receiver android:name=".BootReceiver"
              android:enabled="true"
              android:exported="false" >
              <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED" />
              </intent-filter>
    </receiver>
    
 // 참조 : https://ccdev.tistory.com/27

 * runOnUIThread 
  - 현재 스레드가 UI 스레드라면 UI 자원을 사용하는 행동에 대해선 바로 실행, 아니면 큐에 들어간다.

  // 참조 : https://itmining.tistory.com/6
 
 * preference
  - onStop, onPause 등과 같은 메서드 내에서 일부 데이터를 저장하는 용도 (소리 값이나 치고있던 텍스트 등을 저장하는 용도)
  - apply VS commit : 비동기 VS 동기
    apply는 비동기로 처리함으로써 빠르고 반환형이 없다. 그러나 실패시 알림 받을수 없다.
    commit은 동기로 처리함으로써 느리고 반환형이 있다.
  
 * JNI (Java Native Interface)
  - 자바 외의 다른언어들과 자바 사이에 연결을 위한 인터페이스
  - C/C++에서 사용하거나 사용되기 위함.

 // 참조 : https://re-build.tistory.com/7

 * gson
  - 구글에서 만든 JSON 관련 라이브러리
  - byte -> gson string -> object Mapping

 * glide : 이미지 처리 라이브러리, 이미지들을 비동기적으로 로드(빠름), 자체 캐시관리
  - with(context : Context) : 안드로이드 API를 사용하기 위함.
  - load(imageURL : String) : 이미지를 불러올 리소스 혹은 url 혹은 로컬파일 
  - into(view : View) : 이미지를 보여줄 뷰
  - thumbnail(ratio : float) : 배수 값을 주어 썸네일 크기를 지정.

  // 참조 : http://dktfrmaster.blogspot.com/2016/09/glide.html

 * $위젯 
  - 뷰가 많이 제한됨. N*M : 픽스된 뷰, onUpdate 처리가 제일 중요. 위젯은 여러개가 가능하기 때문에 배열(IDs)로 받음. provider 내부는 broadCaster 리시버로 구성.

 * $카메라 : surfaceView(화면)

 * $realm Object
  - ERD는 String을 기반
  - realm은 Object 자체를 기본 타입으로 둔다.

 * OAuth 인증 
  - 발렛키 (일정 수준의 운행만 가능하도록 제한을 둔 자동차 키. 제한)를 예로 들면 제한적 인증이라 생각하면 됨.
  - Access Token이 발렛키와 같음.
  - 인증 요청 후 인증 부여(SNS 로그인) -> 인증 부여 확인 및 엑세스 토큰 요청 (SNS 접근 확인 절차) -> 엑세스 토큰 부여 (로그인 목적을 위한 엑세스 토큰 부여)

 * $Reactive 
  - 비동기 : - 메인 스레드(UI)를 자연스럽게 하려면 무겁고 시간이 오래걸리는 작업은 백그라운드에서 다른 스레드 혹은 서버나 다른 것에 위임시켜서 시킨다.
  - 데이터 흐름과 변화 전파에 중점. 데이터 흐름을 프로그램 언어로 쉽게 변할 수 있어야 하고, 데이터 흐름을 통해 하부 모델이 자동으로 변화를 전파할 수 있는 것을 의미
 
 [RX - Reactive Extentions]
 데이터 흐름과 변화의 증식에 기반한 비동기 프로그래밍
 비동기 처리와 이벤트 기반의 프로그램 개발을 위해 
 
 * Observable.just(stringObj) - 단순히 모든 구독자에게 stringObj를 보낸다.
 * Observable.from(listOf(1,2,3,4,5)) - Iteratable, future, 배열로 옵저버블을 만든다. 1,2,3,4,5 순서대로 보낸다.

// 참고: http://gaemi.github.io/android/2015/05/20/RxJav

 * 파일 공간
  - EXTERN(public)
  - Asset (외부에서 절대 접근 불가) : App만 접근 가능. getFiles()로 접근 가능.

 * open class, final class
  - open은 상속가능
  - final은 상속 불가능, 하위 클래스에서 오버라이딩 제한, kotlin 기본 클래스

  // 참조 : https://medium.com/@joongwon/kotlin-kotlin-%ED%82%A4%EC%9B%8C%EB%93%9C-%EB%B0%8F-%EC%97%B0%EC%82%B0%EC%9E%90-%ED%95%B4%EB%B6%80-part-3-59ff3ed736be [코틀린 키워드]
  
 * contentResolver VS SQLLite
 * permission 관련